package com.mmnaseri.utils.spring.data.domain.impl;

import com.mmnaseri.utils.spring.data.domain.model.SampleEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.testng.annotations.Test;

import static com.mmnaseri.utils.spring.data.dsl.factory.RepositoryFactoryBuilder.builder;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.notNullValue;

/**
 * @author Mohammad Milad Naseri (m.m.naseri@gmail.com)
 * @since 1.0 (10/26/15)
 */
public class CustomEntityTest {

    public interface SampleEntityRepository extends JpaRepository<SampleEntity, String> {

    }

    @Test
    public void testSavingEntityWithoutId() throws Exception {
        final SampleEntityRepository repository = builder().mock(SampleEntityRepository.class);
        final SampleEntity entity = new SampleEntity("Hello");
        final SampleEntity saved = repository.save(entity);
        assertThat(saved, is(notNullValue()));
        assertThat(saved.getId(), is(notNullValue()));
    }

    @Test
    public void testSavingEntityWithoutAutoGeneratedKeyUsingInternalId() throws Exception {
        final SampleEntityRepository repository = builder().withoutGeneratingKeys().mock(SampleEntityRepository.class);
        final String id = "1";
        final SampleEntity entity = new SampleEntity(id, "Hello");
        final SampleEntity saved = repository.save(entity);
        assertThat(saved, is(notNullValue()));
        assertThat(saved.getId(), is(notNullValue()));
        assertThat(saved.getId(), is(id));
    }

    @Test(expectedExceptions = IllegalStateException.class, expectedExceptionsMessageRegExp = "Method call resulted in internal error.*")
    public void testSavingEntityWithoutAutoGeneratedKeyWithoutInternalId() throws Exception {
        final SampleEntityRepository repository = builder().withoutGeneratingKeys().mock(SampleEntityRepository.class);
        final SampleEntity entity = new SampleEntity("Hello");
        repository.save(entity);
    }

}
